{"ast":null,"code":"var _jsxFileName = \"/Users/rahulsharma/Desktop/React/webpage/src/visibility.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Visibility = () => {\n  _s();\n  const [showLargeBox, setShowLargeBox] = useState(false);\n  const [showStatusBox, setShowStatusBox] = useState(false);\n  const [status, setStatus] = useState('');\n  const [employees, setEmployees] = useState([1, 2, 3]);\n  const [tasks, setTasks] = useState({\n    1: ['Task 1', 'Task 2', 'Task 3'],\n    2: ['Task 1', 'Task 2'],\n    3: ['Task 1']\n  });\n  const [showInputBox, setShowInputBox] = useState(null);\n  const [taskInput, setTaskInput] = useState('');\n  const taskRefs = useRef({}); // Using useRef to store task references\n\n  const handleManagerClick = () => {\n    setShowLargeBox(prev => !prev);\n    setStatus('Not Started');\n  };\n  const handleTaskClick = task => {\n    setShowStatusBox(true);\n    setShowLargeBox(false);\n  };\n  const addEmployee = () => {\n    const newId = employees.length > 0 ? Math.max(...employees) + 1 : 1;\n    setEmployees(prev => [...prev, newId]);\n    setTasks(prev => ({\n      ...prev,\n      [newId]: []\n    }));\n  };\n  const confirmAddTask = employeeId => {\n    if (!taskInput.trim()) return;\n    setTasks(prev => ({\n      ...prev,\n      [employeeId]: [...prev[employeeId], taskInput.trim()]\n    }));\n    setTaskInput('');\n    setShowInputBox(null);\n  };\n  const deleteEmployee = employeeId => {\n    setEmployees(prev => prev.filter(emp => emp !== employeeId));\n    setTasks(prev => {\n      const newTasks = {\n        ...prev\n      };\n      delete newTasks[employeeId];\n      return newTasks;\n    });\n  };\n  const deleteTask = (employeeId, taskIndex) => {\n    setTasks(prev => {\n      const updatedTasks = {\n        ...prev\n      };\n      updatedTasks[employeeId] = updatedTasks[employeeId].filter((_, index) => index !== taskIndex);\n      return updatedTasks;\n    });\n  };\n  const changeTaskStatus = (newStatus, task) => {\n    let backgroundColor = '';\n    switch (newStatus) {\n      case 'Not Started':\n        backgroundColor = '#828282';\n        break;\n      case 'In Progress':\n        backgroundColor = 'orange';\n        break;\n      case 'Testing':\n        backgroundColor = 'yellow';\n        break;\n      case 'Done':\n        backgroundColor = 'green';\n        break;\n      default:\n        break;\n    }\n\n    // Apply background color to the clicked task\n    if (taskRefs.current[task]) {\n      taskRefs.current[task].style.backgroundColor = backgroundColor;\n    }\n    setStatus(newStatus);\n    setShowStatusBox(false);\n    setShowLargeBox(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taskbox\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManagerClick,\n        children: \"Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"taskbox2\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"editbtn\",\n        onClick: addEmployee,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: showLargeBox ? '' : 'hidden',\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"largebox\",\n        children: employees.map(emp => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empbox\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Employee \", emp]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            style: {\n              listStyleType: 'disc',\n              paddingLeft: '20px'\n            },\n            children: (tasks[emp] || []).map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'space-between'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleTaskClick(task),\n                ref: node => taskRefs.current[task] = node // Store the reference to the task button\n                ,\n                children: task\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deleteTask(emp, index),\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 21\n              }, this), \" \"]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), showInputBox === emp ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter task name\",\n              value: taskInput,\n              onChange: e => setTaskInput(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => confirmAddTask(emp),\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowInputBox(null),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              gap: '8px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowInputBox(emp),\n              children: \"Add New Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteEmployee(emp),\n              children: \"\\uD83D\\uDDD1\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this)]\n        }, emp, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: showStatusBox ? '' : 'hidden',\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"statusbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => changeTaskStatus('Not Started', status),\n              children: \"Not Started\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => changeTaskStatus('In Progress', status),\n              children: \"In Progress\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => changeTaskStatus('Testing', status),\n              children: \"Testing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => changeTaskStatus('Done', status),\n              children: \"Done\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setShowStatusBox(false);\n            setShowLargeBox(true);\n          },\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(Visibility, \"kfasf+y2EPjeKTV6nFb8yDBf2z0=\");\n_c = Visibility;\nexport default Visibility;\nvar _c;\n$RefreshReg$(_c, \"Visibility\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","Visibility","_s","showLargeBox","setShowLargeBox","showStatusBox","setShowStatusBox","status","setStatus","employees","setEmployees","tasks","setTasks","showInputBox","setShowInputBox","taskInput","setTaskInput","taskRefs","handleManagerClick","prev","handleTaskClick","task","addEmployee","newId","length","Math","max","confirmAddTask","employeeId","trim","deleteEmployee","filter","emp","newTasks","deleteTask","taskIndex","updatedTasks","_","index","changeTaskStatus","newStatus","backgroundColor","current","style","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","map","listStyleType","paddingLeft","display","justifyContent","ref","node","type","placeholder","value","onChange","e","target","gap","_c","$RefreshReg$"],"sources":["/Users/rahulsharma/Desktop/React/webpage/src/visibility.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport './App.css';\n\nconst Visibility = () => {\n  const [showLargeBox, setShowLargeBox] = useState(false);\n  const [showStatusBox, setShowStatusBox] = useState(false);\n  const [status, setStatus] = useState('');\n  const [employees, setEmployees] = useState([1, 2, 3]);\n  const [tasks, setTasks] = useState({\n    1: ['Task 1', 'Task 2', 'Task 3'],\n    2: ['Task 1', 'Task 2'],\n    3: ['Task 1'],\n  });\n\n  const [showInputBox, setShowInputBox] = useState(null);\n  const [taskInput, setTaskInput] = useState('');\n  const taskRefs = useRef({}); // Using useRef to store task references\n\n  const handleManagerClick = () => {\n    setShowLargeBox((prev) => !prev);\n    setStatus('Not Started');\n  };\n\n  const handleTaskClick = (task) => {\n    setShowStatusBox(true);\n    setShowLargeBox(false);\n  };\n\n  const addEmployee = () => {\n    const newId = employees.length > 0 ? Math.max(...employees) + 1 : 1;\n    setEmployees((prev) => [...prev, newId]);\n    setTasks((prev) => ({ ...prev, [newId]: [] }));\n  };\n\n  const confirmAddTask = (employeeId) => {\n    if (!taskInput.trim()) return;\n    setTasks((prev) => ({\n      ...prev,\n      [employeeId]: [...prev[employeeId], taskInput.trim()],\n    }));\n    setTaskInput('');\n    setShowInputBox(null);\n  };\n\n  const deleteEmployee = (employeeId) => {\n    setEmployees((prev) => prev.filter((emp) => emp !== employeeId));\n    setTasks((prev) => {\n      const newTasks = { ...prev };\n      delete newTasks[employeeId];\n      return newTasks;\n    });\n  };\n\n  const deleteTask = (employeeId, taskIndex) => {\n    setTasks((prev) => {\n      const updatedTasks = { ...prev };\n      updatedTasks[employeeId] = updatedTasks[employeeId].filter(\n        (_, index) => index !== taskIndex\n      );\n      return updatedTasks;\n    });\n  };\n\n  const changeTaskStatus = (newStatus, task) => {\n    let backgroundColor = '';\n    switch (newStatus) {\n      case 'Not Started':\n        backgroundColor = '#828282';\n        break;\n      case 'In Progress':\n        backgroundColor = 'orange';\n        break;\n      case 'Testing':\n        backgroundColor = 'yellow';\n        break;\n      case 'Done':\n        backgroundColor = 'green';\n        break;\n      default:\n        break;\n    }\n\n    // Apply background color to the clicked task\n    if (taskRefs.current[task]) {\n      taskRefs.current[task].style.backgroundColor = backgroundColor;\n    }\n\n    setStatus(newStatus);\n    setShowStatusBox(false);\n    setShowLargeBox(true);\n  };\n\n  return (\n    <div>\n      <div className=\"taskbox\">\n        <button onClick={handleManagerClick}>Manager</button>\n      </div>\n\n      <div className=\"taskbox2\">\n        <button id=\"editbtn\" onClick={addEmployee}>\n          +\n        </button>\n      </div>\n\n      <div className={showLargeBox ? '' : 'hidden'}>\n        <div className=\"largebox\">\n          {employees.map((emp) => (\n            <div className=\"empbox\" key={emp}>\n              <h3>Employee {emp}</h3>\n\n              <ul style={{ listStyleType: 'disc', paddingLeft: '20px' }}>\n                {(tasks[emp] || []).map((task, index) => (\n                  <li\n                    key={index}\n                    style={{ display: 'flex', justifyContent: 'space-between' }}\n                  >\n                    <button\n                      onClick={() => handleTaskClick(task)}\n                      ref={(node) => (taskRefs.current[task] = node)} // Store the reference to the task button\n                    >\n                      {task}\n                    </button>\n                    <button onClick={() => deleteTask(emp, index)}>🗑️</button> {/* Delete task button */}\n                  </li>\n                ))}\n              </ul>\n\n              {showInputBox === emp ? (\n                <div>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter task name\"\n                    value={taskInput}\n                    onChange={(e) => setTaskInput(e.target.value)}\n                  />\n                  <button onClick={() => confirmAddTask(emp)}>Add</button>\n                  <button onClick={() => setShowInputBox(null)}>Cancel</button>\n                </div>\n              ) : (\n                <div style={{ display: 'flex', gap: '8px' }}>\n                  <button onClick={() => setShowInputBox(emp)}>Add New Task</button>\n                  <button onClick={() => deleteEmployee(emp)}>🗑️</button>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className={showStatusBox ? '' : 'hidden'}>\n        <div className=\"statusbox\">\n          <ul>\n            <li>\n              <button\n                onClick={() => changeTaskStatus('Not Started', status)}\n              >\n                Not Started\n              </button>\n            </li>\n            <li>\n              <button\n                onClick={() => changeTaskStatus('In Progress', status)}\n              >\n                In Progress\n              </button>\n            </li>\n            <li>\n              <button\n                onClick={() => changeTaskStatus('Testing', status)}\n              >\n                Testing\n              </button>\n            </li>\n            <li>\n              <button\n                onClick={() => changeTaskStatus('Done', status)}\n              >\n                Done\n              </button>\n            </li>\n          </ul>\n          <p>Status: {status}</p>\n          <button\n            onClick={() => {\n              setShowStatusBox(false);\n              setShowLargeBox(true);\n            }}\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Visibility;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}